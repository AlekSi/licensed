#!/bin/bash
#/ Usage: script/build-rubyc-exe <RUBYC> [VERSION]
#/
#/ WARNING: You should not need to call this directly. Please create packages using
#/ `script/package [platform]` or `bundle exec rake package[platform]`
#/
#/ Builds a distributable package for licensed for a given RUBYC compiler and licensed VERSION.
#/ Packages are of the form licensed-$VERSION-$PLATFORM-x64.tar.gz and contain a `./licensed` executable
#/ Built Packages are placed in the <root>/pkg directory.
#/
#/ OPTIONS:
#/   <RUBYC>           The path to a rubyc compiler that should be used to compile the target executable
#/   [VERSION]         (optional, default to current git branch or SHA1) version of licensed to build exe at
#/
#/ EXAMPLES:
#/
#/   Builds a package for version 1.1.0 using a local rubyc compiler
#/     $ build-rubyc-exe RUBYC="./rubyc-darwin" VERSION="1.1.0"
#/

set -euo pipefail

usage(){
  grep "^#/" <"$0" | cut -c3-
}

BASE_DIR="$(cd "$(dirname $0)/.." && pwd)"
VERSION=${VERSION:=""}
RUBYC=${RUBYC:=""}
if [ ! -f "$RUBYC" ]; then
  echo "Please specify a rubyc compiler" >&2
  usage
  exit 127
fi

BUILD_DEST="$(mktemp -d)"
trap "rm -rf $BUILD_DEST; rm -rf $BASE_DIR/.licenses" EXIT

if [ -n "$VERSION" ]; then
  # if a version is given, check out the repo at the version
  CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  git checkout "$VERSION"
  trap "rm -rf $BUILD_DEST; git checkout $CURRENT_BRANCH" EXIT
else
  # if a version is not provided, get an identifier from the current HEAD
  VERSION="$(git rev-parse --abbrev-ref HEAD)"
fi

PACKAGE_DEST="$BASE_DIR/pkg/$VERSION"
mkdir -p "$PACKAGE_DEST"

PLATFORM="$(uname -s | tr '[:upper:]' '[:lower:]')"
TARGET="licensed-$VERSION-$PLATFORM-x64.tar.gz"

# build the licensed rubyc executable
"$RUBYC" --clean-tmpdir -o "$BUILD_DEST/licensed" "$BASE_DIR/exe/licensed"
chmod +x $BUILD_DEST/licensed

# cache license metadata
(
  cd $BASE_DIR
  script/bootstrap
  rm -rf $BASE_DIR/.licenses
  bundle exec exe/licensed cache
)

# copy all metadata to build destination
mkdir -p "$BUILD_DEST/meta"
cp -R "$BASE_DIR/vendor/ruby" "$BUILD_DEST/meta"
cp -R "$BASE_DIR/.licenses" "$BUILD_DEST/meta"
cp "$BASE_DIR/LICENSE" "$BUILD_DEST/meta"
cp "$BASE_DIR/README.md" "$BUILD_DEST/meta"

# create release archive
tar -C "$BUILD_DEST" -czf "$PACKAGE_DEST/$TARGET" .

echo "licensed built to $PACKAGE_DEST/$TARGET"
